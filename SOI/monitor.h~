1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
#ifndef __monitor_h
#define __monitor_h
 
#include <stdio.h> 
#include <stdlib.h> 
 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <string.h> 
#include <errno.h> 
#include <fcntl.h> 
#include <pthread.h> 
#include <unistd.h>
#include <semaphore.h>
 
 
class Semaphore
{
public:
 
  Semaphore( int value )
  {
#ifdef _WIN32
    sem = CreateSemaphore( NULL, value, 1, NULL );
#else
     if( sem_init( & sem, 0, value ) != 0 )
       throw "sem_init: failed";
#endif
  }
  ~Semaphore()
  { 
#ifdef _WIN32
    CloseHandle( sem );
#else
      sem_destroy( & sem ); 
#endif
  }
 
  void p()
  {
#ifdef _WIN32
      WaitForSingleObject( sem, INFINITE );
#else
     if( sem_wait( & sem ) != 0 )
       throw "sem_wait: failed";
#endif
  }
 
  void v()
  {
#ifdef _WIN32
      ReleaseSemaphore( sem, 1, NULL );
#else
     if( sem_post( & sem ) != 0 )
       throw "sem_post: failed";
#endif
  }
   
 
private:
 
#ifdef _WIN32
    HANDLE sem;
#else
    sem_t sem;
#endif
};
 
class Condition
{
  friend class Monitor;
 
public:
    Condition() : w( 0 )
    {
        waitingCount = 0;
    }
 
    void wait()
    {
        w.p();
    }
 
    bool signal()
    {
        if( waitingCount )
        {
            -- waitingCount;
            w.v();
            return true;
        }//if
        else
            return false;
    }
 
private:
    Semaphore w;
    int waitingCount; //liczba oczekujacych watkow
};
 
 
class Monitor
{
public:
    Monitor() : s( 1 ) {}
 
    void enter()
    {
        s.p();
    }
 
    void leave()
    {
        s.v();
    }
 
    void wait( Condition & cond )
    {
        ++ cond.waitingCount;
        leave();
        cond.wait();
    }
 
    void signal( Condition & cond )
    {
        if( cond.signal() )
            enter();
    }
 
 
private:
    Semaphore s;
};
 
#endif
